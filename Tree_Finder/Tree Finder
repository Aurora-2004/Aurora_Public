task.wait(5)
print("rejoining")
repeat task.wait() until game:IsLoaded() and game:GetService("Players").LocalPlayer:GetMouse()
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local GameServers = HttpService:JSONDecode(game:HttpGet(string.format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100", game.PlaceId)))
local JoinedServers = (isfile("JoinedServers.txt") and HttpService:JSONDecode(readfile("JoinedServers.txt"))) or {}

if #JoinedServers >= 200 then
    JoinedServers = {}
end

local function FindServer()
    for _, Server in next, GameServers.data do
        if Server.playing < Server.maxPlayers and Server.id ~= game.JobId and not table.find(JoinedServers, Server.id) then
            return Server
        end
    end
end

local ServerToJoin = FindServer()

if not ServerToJoin then
    repeat ServerToJoin = FindServer() task.wait() until ServerToJoin
end

print("Found server")

JoinedServers[#JoinedServers + 1] = ServerToJoin.id
writefile("JoinedServers.txt", HttpService:JSONEncode(JoinedServers))

while task.wait() do
    local Success, Error = pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, ServerToJoin.id, Player)
    end)
    ServerToJoin = FindServer()
    warn((Success and "Joining Server") or string.format("Failed to join server: %s", Error))
end
